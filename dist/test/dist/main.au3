global $__PATH__

#include-once

; boot code here

#include-once
#include-once
func count($array, $dimension = 1)
	return UBound($array, $dimension)
EndFunc

func push(byref $array, $element)
	$len = count($array)

	ReDim $array[$len + 1]

	$array[$len] = $element

	return $len + 1
EndFunc

func pop(byref $array)
	$len = count($array)
	if($len == 0) then return Null

	$element = $array[$len - 1]

	ReDim $array[$len - 1]

	return $element
EndFunc

func shift(byref $array)
	$len = count($array)
	if($len == 0) then return Null

	$element = $array[0]

	for $i = 0 to $len-2
		$array[$i] = $array[$i+1]
	Next

	redim $array[$len-1]

	return $element
EndFunc

func unshift(ByRef $array, $element)
	$len = count($array)

	redim $array[$len+1]

	for $i = $len to 1 Step -1
		$array[$i] = $array[$i - 1]
	Next

	$array[0] = $element

	return $len + 1
EndFunc

func a_times($value, $amount = 1)
	$array = a()

	for $i = 0 to $amount -1
		push($array, $value)
	Next

	return $array
EndFunc

func array($1 = NULL, $2 = Null, $3 = Null, $4 = Null, $5 = Null, $6 = Null, $7 = Null, $8 = Null, $9 = Null, $10 = Null, $11 = Null, $12 = Null, $13 = Null, $14 = Null, $15 = Null, $16 = Null, $17 = Null, $18 = Null, $19 = Null, $20 = Null, $21 = Null, $22 = Null, $23 = Null, $24 = Null, $25 = Null, $26 = Null, $27 = Null, $28 = Null, $29 = Null, $30 = Null, $31 = Null, $32 = Null, $33 = Null, $34 = Null, $35 = Null, $36 = Null, $37 = Null, $38 = Null, $39 = Null, $40 = Null, $41 = Null, $42 = Null, $43 = Null, $44 = Null, $45 = Null, $46 = Null, $47 = Null, $48 = Null, $49 = Null, $50 = Null, $51 = Null, $52 = Null, $53 = Null, $54 = Null, $55 = Null, $56 = Null, $57 = Null, $58 = Null, $59 = Null, $60 = Null, $61 = Null, $62 = Null, $63 = Null, $64 = Null, $65 = Null, $66 = Null, $67 = Null, $68 = Null, $69 = Null, $70 = Null, $71 = Null, $72 = Null, $73 = Null, $74 = Null, $75 = Null, $76 = Null, $77 = Null, $78 = Null, $79 = Null, $80 = Null, $81 = Null, $82 = Null, $83 = Null, $84 = Null, $85 = Null, $86 = Null, $87 = Null, $88 = Null, $89 = Null, $90 = Null, $91 = Null, $92 = Null, $93 = Null, $94 = Null, $95 = Null, $96 = Null, $97 = Null, $98 = Null, $99 = Null, $100 = Null)
	return _a_create($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52, $53, $54, $55, $56, $57, $58, $59, $60, $61, $62, $63, $64, $65, $66, $67, $68, $69, $70, $71, $72, $73, $74, $75, $76, $77, $78, $79, $80, $81, $82, $83, $84, $85, $86, $87, $88, $89, $90, $91, $92, $93, $94, $95, $96, $97, $98, $99, $100)
EndFunc

func a($1 = NULL, $2 = Null, $3 = Null, $4 = Null, $5 = Null, $6 = Null, $7 = Null, $8 = Null, $9 = Null, $10 = Null, $11 = Null, $12 = Null, $13 = Null, $14 = Null, $15 = Null, $16 = Null, $17 = Null, $18 = Null, $19 = Null, $20 = Null, $21 = Null, $22 = Null, $23 = Null, $24 = Null, $25 = Null, $26 = Null, $27 = Null, $28 = Null, $29 = Null, $30 = Null, $31 = Null, $32 = Null, $33 = Null, $34 = Null, $35 = Null, $36 = Null, $37 = Null, $38 = Null, $39 = Null, $40 = Null, $41 = Null, $42 = Null, $43 = Null, $44 = Null, $45 = Null, $46 = Null, $47 = Null, $48 = Null, $49 = Null, $50 = Null, $51 = Null, $52 = Null, $53 = Null, $54 = Null, $55 = Null, $56 = Null, $57 = Null, $58 = Null, $59 = Null, $60 = Null, $61 = Null, $62 = Null, $63 = Null, $64 = Null, $65 = Null, $66 = Null, $67 = Null, $68 = Null, $69 = Null, $70 = Null, $71 = Null, $72 = Null, $73 = Null, $74 = Null, $75 = Null, $76 = Null, $77 = Null, $78 = Null, $79 = Null, $80 = Null, $81 = Null, $82 = Null, $83 = Null, $84 = Null, $85 = Null, $86 = Null, $87 = Null, $88 = Null, $89 = Null, $90 = Null, $91 = Null, $92 = Null, $93 = Null, $94 = Null, $95 = Null, $96 = Null, $97 = Null, $98 = Null, $99 = Null, $100 = Null)
	return array($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52, $53, $54, $55, $56, $57, $58, $59, $60, $61, $62, $63, $64, $65, $66, $67, $68, $69, $70, $71, $72, $73, $74, $75, $76, $77, $78, $79, $80, $81, $82, $83, $84, $85, $86, $87, $88, $89, $90, $91, $92, $93, $94, $95, $96, $97, $98, $99, $100)
EndFunc

Func _a_create($1 = NULL, $2 = Null, $3 = Null, $4 = Null, $5 = Null, $6 = Null, $7 = Null, $8 = Null, $9 = Null, $10 = Null, $11 = Null, $12 = Null, $13 = Null, $14 = Null, $15 = Null, $16 = Null, $17 = Null, $18 = Null, $19 = Null, $20 = Null, $21 = Null, $22 = Null, $23 = Null, $24 = Null, $25 = Null, $26 = Null, $27 = Null, $28 = Null, $29 = Null, $30 = Null, $31 = Null, $32 = Null, $33 = Null, $34 = Null, $35 = Null, $36 = Null, $37 = Null, $38 = Null, $39 = Null, $40 = Null, $41 = Null, $42 = Null, $43 = Null, $44 = Null, $45 = Null, $46 = Null, $47 = Null, $48 = Null, $49 = Null, $50 = Null, $51 = Null, $52 = Null, $53 = Null, $54 = Null, $55 = Null, $56 = Null, $57 = Null, $58 = Null, $59 = Null, $60 = Null, $61 = Null, $62 = Null, $63 = Null, $64 = Null, $65 = Null, $66 = Null, $67 = Null, $68 = Null, $69 = Null, $70 = Null, $71 = Null, $72 = Null, $73 = Null, $74 = Null, $75 = Null, $76 = Null, $77 = Null, $78 = Null, $79 = Null, $80 = Null, $81 = Null, $82 = Null, $83 = Null, $84 = Null, $85 = Null, $86 = Null, $87 = Null, $88 = Null, $89 = Null, $90 = Null, $91 = Null, $92 = Null, $93 = Null, $94 = Null, $95 = Null, $96 = Null, $97 = Null, $98 = Null, $99 = Null, $100 = Null)
	If $1 == Null Then
		dim $array[0]
	ElseIf $2 == Null Then
		dim $array[1] = [$1]
	ElseIf $3 == Null Then
		dim $array[2] = [$1, $2]
	ElseIf $4 == Null Then
		dim $array[3] = [$1, $2, $3]
	ElseIf $5 == Null Then
		dim $array[4] = [$1, $2, $3, $4]
	ElseIf $6 == Null Then
		dim $array[5] = [$1, $2, $3, $4, $5]
	ElseIf $7 == Null Then
		dim $array[6] = [$1, $2, $3, $4, $5, $6]
	ElseIf $8 == Null Then
		dim $array[7] = [$1, $2, $3, $4, $5, $6, $7]
	ElseIf $9 == Null Then
		dim $array[8] = [$1, $2, $3, $4, $5, $6, $7, $8]
	ElseIf $10 == Null Then
		dim $array[9] = [$1, $2, $3, $4, $5, $6, $7, $8, $9]
	ElseIf $11 == Null Then
		dim $array[10] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10]
	ElseIf $12 == Null Then
		dim $array[11] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11]
	ElseIf $13 == Null Then
		dim $array[12] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12]
	ElseIf $14 == Null Then
		dim $array[13] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13]
	ElseIf $15 == Null Then
		dim $array[14] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14]
	ElseIf $16 == Null Then
		dim $array[15] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15]
	ElseIf $17 == Null Then
		dim $array[16] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16]
	ElseIf $18 == Null Then
		dim $array[17] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17]
	ElseIf $19 == Null Then
		dim $array[18] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18]
	ElseIf $20 == Null Then
		dim $array[19] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19]
	ElseIf $21 == Null Then
		dim $array[20] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20]
	ElseIf $22 == Null Then
		dim $array[21] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21]
	ElseIf $23 == Null Then
		dim $array[22] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22]
	ElseIf $24 == Null Then
		dim $array[23] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23]
	ElseIf $25 == Null Then
		dim $array[24] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24]
	ElseIf $26 == Null Then
		dim $array[25] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25]
	ElseIf $27 == Null Then
		dim $array[26] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26]
	ElseIf $28 == Null Then
		dim $array[27] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27]
	ElseIf $29 == Null Then
		dim $array[28] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28]
	ElseIf $30 == Null Then
		dim $array[29] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29]
	ElseIf $31 == Null Then
		dim $array[30] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30]
	ElseIf $32 == Null Then
		dim $array[31] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31]
	ElseIf $33 == Null Then
		dim $array[32] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32]
	ElseIf $34 == Null Then
		dim $array[33] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33]
	ElseIf $35 == Null Then
		dim $array[34] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34]
	ElseIf $36 == Null Then
		dim $array[35] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35]
	ElseIf $37 == Null Then
		dim $array[36] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36]
	ElseIf $38 == Null Then
		dim $array[37] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37]
	ElseIf $39 == Null Then
		dim $array[38] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38]
	ElseIf $40 == Null Then
		dim $array[39] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39]
	ElseIf $41 == Null Then
		dim $array[40] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40]
	ElseIf $42 == Null Then
		dim $array[41] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41]
	ElseIf $43 == Null Then
		dim $array[42] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42]
	ElseIf $44 == Null Then
		dim $array[43] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43]
	ElseIf $45 == Null Then
		dim $array[44] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44]
	ElseIf $46 == Null Then
		dim $array[45] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45]
	ElseIf $47 == Null Then
		dim $array[46] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46]
	ElseIf $48 == Null Then
		dim $array[47] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47]
	ElseIf $49 == Null Then
		dim $array[48] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48]
	ElseIf $50 == Null Then
		dim $array[49] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49]
	ElseIf $51 == Null Then
		dim $array[50] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50]
	ElseIf $52 == Null Then
		dim $array[51] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51]
	ElseIf $53 == Null Then
		dim $array[52] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52]
	ElseIf $54 == Null Then
		dim $array[53] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52, $53]
	ElseIf $55 == Null Then
		dim $array[54] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52, $53, $54]
	ElseIf $56 == Null Then
		dim $array[55] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52, $53, $54, $55]
	ElseIf $57 == Null Then
		dim $array[56] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52, $53, $54, $55, $56]
	ElseIf $58 == Null Then
		dim $array[57] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52, $53, $54, $55, $56, $57]
	ElseIf $59 == Null Then
		dim $array[58] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52, $53, $54, $55, $56, $57, $58]
	ElseIf $60 == Null Then
		dim $array[59] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52, $53, $54, $55, $56, $57, $58, $59]
	ElseIf $61 == Null Then
		dim $array[60] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52, $53, $54, $55, $56, $57, $58, $59, $60]
	ElseIf $62 == Null Then
		dim $array[61] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52, $53, $54, $55, $56, $57, $58, $59, $60, $61]
	ElseIf $63 == Null Then
		dim $array[62] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52, $53, $54, $55, $56, $57, $58, $59, $60, $61, $62]
	ElseIf $64 == Null Then
		dim $array[63] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52, $53, $54, $55, $56, $57, $58, $59, $60, $61, $62, $63]
	ElseIf $65 == Null Then
		dim $array[64] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52, $53, $54, $55, $56, $57, $58, $59, $60, $61, $62, $63, $64]
	ElseIf $66 == Null Then
		dim $array[65] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52, $53, $54, $55, $56, $57, $58, $59, $60, $61, $62, $63, $64, $65]
	ElseIf $67 == Null Then
		dim $array[66] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52, $53, $54, $55, $56, $57, $58, $59, $60, $61, $62, $63, $64, $65, $66]
	ElseIf $68 == Null Then
		dim $array[67] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52, $53, $54, $55, $56, $57, $58, $59, $60, $61, $62, $63, $64, $65, $66, $67]
	ElseIf $69 == Null Then
		dim $array[68] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52, $53, $54, $55, $56, $57, $58, $59, $60, $61, $62, $63, $64, $65, $66, $67, $68]
	ElseIf $70 == Null Then
		dim $array[69] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52, $53, $54, $55, $56, $57, $58, $59, $60, $61, $62, $63, $64, $65, $66, $67, $68, $69]
	ElseIf $71 == Null Then
		dim $array[70] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52, $53, $54, $55, $56, $57, $58, $59, $60, $61, $62, $63, $64, $65, $66, $67, $68, $69, $70]
	ElseIf $72 == Null Then
		dim $array[71] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52, $53, $54, $55, $56, $57, $58, $59, $60, $61, $62, $63, $64, $65, $66, $67, $68, $69, $70, $71]
	ElseIf $73 == Null Then
		dim $array[72] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52, $53, $54, $55, $56, $57, $58, $59, $60, $61, $62, $63, $64, $65, $66, $67, $68, $69, $70, $71, $72]
	ElseIf $74 == Null Then
		dim $array[73] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52, $53, $54, $55, $56, $57, $58, $59, $60, $61, $62, $63, $64, $65, $66, $67, $68, $69, $70, $71, $72, $73]
	ElseIf $75 == Null Then
		dim $array[74] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52, $53, $54, $55, $56, $57, $58, $59, $60, $61, $62, $63, $64, $65, $66, $67, $68, $69, $70, $71, $72, $73, $74]
	ElseIf $76 == Null Then
		dim $array[75] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52, $53, $54, $55, $56, $57, $58, $59, $60, $61, $62, $63, $64, $65, $66, $67, $68, $69, $70, $71, $72, $73, $74, $75]
	ElseIf $77 == Null Then
		dim $array[76] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52, $53, $54, $55, $56, $57, $58, $59, $60, $61, $62, $63, $64, $65, $66, $67, $68, $69, $70, $71, $72, $73, $74, $75, $76]
	ElseIf $78 == Null Then
		dim $array[77] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52, $53, $54, $55, $56, $57, $58, $59, $60, $61, $62, $63, $64, $65, $66, $67, $68, $69, $70, $71, $72, $73, $74, $75, $76, $77]
	ElseIf $79 == Null Then
		dim $array[78] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52, $53, $54, $55, $56, $57, $58, $59, $60, $61, $62, $63, $64, $65, $66, $67, $68, $69, $70, $71, $72, $73, $74, $75, $76, $77, $78]
	ElseIf $80 == Null Then
		dim $array[79] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52, $53, $54, $55, $56, $57, $58, $59, $60, $61, $62, $63, $64, $65, $66, $67, $68, $69, $70, $71, $72, $73, $74, $75, $76, $77, $78, $79]
	ElseIf $81 == Null Then
		dim $array[80] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52, $53, $54, $55, $56, $57, $58, $59, $60, $61, $62, $63, $64, $65, $66, $67, $68, $69, $70, $71, $72, $73, $74, $75, $76, $77, $78, $79, $80]
	ElseIf $82 == Null Then
		dim $array[81] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52, $53, $54, $55, $56, $57, $58, $59, $60, $61, $62, $63, $64, $65, $66, $67, $68, $69, $70, $71, $72, $73, $74, $75, $76, $77, $78, $79, $80, $81]
	ElseIf $83 == Null Then
		dim $array[82] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52, $53, $54, $55, $56, $57, $58, $59, $60, $61, $62, $63, $64, $65, $66, $67, $68, $69, $70, $71, $72, $73, $74, $75, $76, $77, $78, $79, $80, $81, $82]
	ElseIf $84 == Null Then
		dim $array[83] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52, $53, $54, $55, $56, $57, $58, $59, $60, $61, $62, $63, $64, $65, $66, $67, $68, $69, $70, $71, $72, $73, $74, $75, $76, $77, $78, $79, $80, $81, $82, $83]
	ElseIf $85 == Null Then
		dim $array[84] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52, $53, $54, $55, $56, $57, $58, $59, $60, $61, $62, $63, $64, $65, $66, $67, $68, $69, $70, $71, $72, $73, $74, $75, $76, $77, $78, $79, $80, $81, $82, $83, $84]
	ElseIf $86 == Null Then
		dim $array[85] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52, $53, $54, $55, $56, $57, $58, $59, $60, $61, $62, $63, $64, $65, $66, $67, $68, $69, $70, $71, $72, $73, $74, $75, $76, $77, $78, $79, $80, $81, $82, $83, $84, $85]
	ElseIf $87 == Null Then
		dim $array[86] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52, $53, $54, $55, $56, $57, $58, $59, $60, $61, $62, $63, $64, $65, $66, $67, $68, $69, $70, $71, $72, $73, $74, $75, $76, $77, $78, $79, $80, $81, $82, $83, $84, $85, $86]
	ElseIf $88 == Null Then
		dim $array[87] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52, $53, $54, $55, $56, $57, $58, $59, $60, $61, $62, $63, $64, $65, $66, $67, $68, $69, $70, $71, $72, $73, $74, $75, $76, $77, $78, $79, $80, $81, $82, $83, $84, $85, $86, $87]
	ElseIf $89 == Null Then
		dim $array[88] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52, $53, $54, $55, $56, $57, $58, $59, $60, $61, $62, $63, $64, $65, $66, $67, $68, $69, $70, $71, $72, $73, $74, $75, $76, $77, $78, $79, $80, $81, $82, $83, $84, $85, $86, $87, $88]
	ElseIf $90 == Null Then
		dim $array[89] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52, $53, $54, $55, $56, $57, $58, $59, $60, $61, $62, $63, $64, $65, $66, $67, $68, $69, $70, $71, $72, $73, $74, $75, $76, $77, $78, $79, $80, $81, $82, $83, $84, $85, $86, $87, $88, $89]
	ElseIf $91 == Null Then
		dim $array[90] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52, $53, $54, $55, $56, $57, $58, $59, $60, $61, $62, $63, $64, $65, $66, $67, $68, $69, $70, $71, $72, $73, $74, $75, $76, $77, $78, $79, $80, $81, $82, $83, $84, $85, $86, $87, $88, $89, $90]
	ElseIf $92 == Null Then
		dim $array[91] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52, $53, $54, $55, $56, $57, $58, $59, $60, $61, $62, $63, $64, $65, $66, $67, $68, $69, $70, $71, $72, $73, $74, $75, $76, $77, $78, $79, $80, $81, $82, $83, $84, $85, $86, $87, $88, $89, $90, $91]
	ElseIf $93 == Null Then
		dim $array[92] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52, $53, $54, $55, $56, $57, $58, $59, $60, $61, $62, $63, $64, $65, $66, $67, $68, $69, $70, $71, $72, $73, $74, $75, $76, $77, $78, $79, $80, $81, $82, $83, $84, $85, $86, $87, $88, $89, $90, $91, $92]
	ElseIf $94 == Null Then
		dim $array[93] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52, $53, $54, $55, $56, $57, $58, $59, $60, $61, $62, $63, $64, $65, $66, $67, $68, $69, $70, $71, $72, $73, $74, $75, $76, $77, $78, $79, $80, $81, $82, $83, $84, $85, $86, $87, $88, $89, $90, $91, $92, $93]
	ElseIf $95 == Null Then
		dim $array[94] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52, $53, $54, $55, $56, $57, $58, $59, $60, $61, $62, $63, $64, $65, $66, $67, $68, $69, $70, $71, $72, $73, $74, $75, $76, $77, $78, $79, $80, $81, $82, $83, $84, $85, $86, $87, $88, $89, $90, $91, $92, $93, $94]
	ElseIf $96 == Null Then
		dim $array[95] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52, $53, $54, $55, $56, $57, $58, $59, $60, $61, $62, $63, $64, $65, $66, $67, $68, $69, $70, $71, $72, $73, $74, $75, $76, $77, $78, $79, $80, $81, $82, $83, $84, $85, $86, $87, $88, $89, $90, $91, $92, $93, $94, $95]
	ElseIf $97 == Null Then
		dim $array[96] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52, $53, $54, $55, $56, $57, $58, $59, $60, $61, $62, $63, $64, $65, $66, $67, $68, $69, $70, $71, $72, $73, $74, $75, $76, $77, $78, $79, $80, $81, $82, $83, $84, $85, $86, $87, $88, $89, $90, $91, $92, $93, $94, $95, $96]
	ElseIf $98 == Null Then
		dim $array[97] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52, $53, $54, $55, $56, $57, $58, $59, $60, $61, $62, $63, $64, $65, $66, $67, $68, $69, $70, $71, $72, $73, $74, $75, $76, $77, $78, $79, $80, $81, $82, $83, $84, $85, $86, $87, $88, $89, $90, $91, $92, $93, $94, $95, $96, $97]
	ElseIf $99 == Null Then
		dim $array[98] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52, $53, $54, $55, $56, $57, $58, $59, $60, $61, $62, $63, $64, $65, $66, $67, $68, $69, $70, $71, $72, $73, $74, $75, $76, $77, $78, $79, $80, $81, $82, $83, $84, $85, $86, $87, $88, $89, $90, $91, $92, $93, $94, $95, $96, $97, $98]
	ElseIf $100 == Null Then
		dim $array[99] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52, $53, $54, $55, $56, $57, $58, $59, $60, $61, $62, $63, $64, $65, $66, $67, $68, $69, $70, $71, $72, $73, $74, $75, $76, $77, $78, $79, $80, $81, $82, $83, $84, $85, $86, $87, $88, $89, $90, $91, $92, $93, $94, $95, $96, $97, $98, $99]
	Else
		dim $array[100] = [$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, $31, $32, $33, $34, $35, $36, $37, $38, $39, $40, $41, $42, $43, $44, $45, $46, $47, $48, $49, $50, $51, $52, $53, $54, $55, $56, $57, $58, $59, $60, $61, $62, $63, $64, $65, $66, $67, $68, $69, $70, $71, $72, $73, $74, $75, $76, $77, $78, $79, $80, $81, $82, $83, $84, $85, $86, $87, $88, $89, $90, $91, $92, $93, $94, $95, $96, $97, $98, $99, $100]
	Endif
	Return $array
EndFunc
Func au3_call($sFilePath, $sWorkingDir = "")
    Return Run('"' & @AutoItExe & '" /AutoIt3ExecuteScript "' & $sFilePath & '"', $sWorkingDir, @SW_SHOW, 0x10)
EndFunc   ;==>_RunAU3

Func au3wait_call($sFilePath, $sWorkingDir = "")
    Return RunWait('"' & @AutoItExe & '" /AutoIt3ExecuteScript "' & $sFilePath & '"', $sWorkingDir, @SW_SHOW, 0x10)
EndFunc   ;==>_RunAU3
Func is($something)
	if $something then return True
	return False
EndFunc

func _or($a, $b)
	if is($a) then return $a
	return $b
EndFunc

func cli_setup()
	dim $cli[1]

	$cli[0] = $CmdLine

	return $cli
EndFunc

func cli_param($cli, $n)

EndFunc

func print($something)
	return Cout($something)
EndFunc

func scan()
	$s = ''
	Cin($s)
	return $s
EndFunc

func say($something)
	return print($something & @CRLF)
EndFunc

func ask($something)
	say($something)
	return scan()
EndFunc

; #INDEX# =======================================================================================================================
; Title .........: Console
; AutoIt Version : 3.3.8.1+
; Language ......: English
; Description ...: Functions that assist with native consoles.
; Author(s) .....: Janus Thorborg (Shaggi)
; ===============================================================================================================================
#include-once
#include <WinApiError.au3>
#OnAutoItStartRegister "__Console__StartUp"

; #CURRENT# =====================================================================================================================
;Cout
;Cin
;Cerr
;Getch
;system
;RegisterConsoleEvent
; ===============================================================================================================================

; #INTERNAL_USE_ONLY# ===========================================================================================================
;__Console__CreateConsole
;__Console__KillConsole
;__Console__StartUp
;__Console__ShutDown
;__Console__GetStdHandle
;__Console__HandlerRoutine
; ===============================================================================================================================

; #VARIABLES# ===================================================================================================================
;	Don't touch these.
Global $__Dll_Kernel32, $__Amount__Startup_Console
Global $__Console__hCtrlHandler = 0
Global $_Included_Console = True
; $_bConsole__PrintToStdStreams will cause the output functions to write to autoit's own streams, too.
Global $_bConsole__PrintToStdStreams = False
; ===============================================================================================================================
; #ENUMS# =======================================================================================================================
Global Enum $sigCtrlC = 0, $sigCtrlBreak, $sigCtrlClose, $sigCtrlLogOff = 5, $sigCtrlShutDown = 6
Global Enum $_eWrite = 0, $_eRead, $_eSetCT, $_eGetCM, $_eSetCM
Global Enum $_cOut, $_cIn, $_cErr
; ===============================================================================================================================
; #TABLES# ======================================================================================================================
;   These tables, on startup, get initialized to a table with function pointers and handles.
Global Const $_sfTable[5] = ["WriteConsoleW","ReadConsoleW", "SetConsoleTextAttribute", "GetConsoleMode", "SetConsoleMode"]
Global $_pfTable[5]
Global $__Console__Handlers[2][2]
Global $__CStreams[3]
; ===============================================================================================================================
; #CONSTANTS# ===================================================================================================================
;	Thanks to Matt Diesel (Mat) for writing these down.
; Attributes flags (colors)
; WinCon.h (153 - 160)
Global Const $FOREGROUND_BLUE = 0x0001 ; text color contains blue.
Global Const $FOREGROUND_GREEN = 0x0002 ; text color contains green.
Global Const $FOREGROUND_RED = 0x0004 ; text color contains red.
Global Const $FOREGROUND_INTENSITY = 0x0008 ; text color is intensified.
Global Const $BACKGROUND_BLUE = 0x0010 ; background color contains blue.
Global Const $BACKGROUND_GREEN = 0x0020 ; background color contains green.
Global Const $BACKGROUND_RED = 0x0040 ; background color contains red.
Global Const $BACKGROUND_INTENSITY = 0x0080 ; background color is intensified.
; Attributes flags
; WinCon.h (161 - 169)
Global Const $COMMON_LVB_LEADING_BYTE = 0x0100 ; Leading Byte of DBCS
Global Const $COMMON_LVB_TRAILING_BYTE = 0x0200 ; Trailing Byte of DBCS
Global Const $COMMON_LVB_GRID_HORIZONTAL = 0x0400 ; DBCS: Grid attribute: top horizontal.
Global Const $COMMON_LVB_GRID_LVERTICAL = 0x0800 ; DBCS: Grid attribute: left vertical.
Global Const $COMMON_LVB_GRID_RVERTICAL = 0x1000 ; DBCS: Grid attribute: right vertical.
Global Const $COMMON_LVB_REVERSE_VIDEO = 0x4000 ; DBCS: Reverse fore/back ground attribute.
Global Const $COMMON_LVB_UNDERSCORE = 0x8000 ; DBCS: Underscore.
Global Const $COMMON_LVB_SBCSDBCS = 0x0300 ; SBCS or DBCS flag.
; ===============================================================================================================================
; #STRUCTURES# ==================================================================================================================
; $tag_CONSOLE_SCREEN_BUFFER_INFO
; $tagCHAR_INFO_W
; $tagPSMALL_RECT
; ===============================================================================================================================
;	These are merely provided for convinience, they aren't used (yet)
Global Const $tag_CONSOLE_SCREEN_BUFFER_INFO = "short dwSizeX; short dwSizeY; short dwCursorPositionX;short dwCursorPositionY; word wAttributes;" & _
		"SHORT srWindowLeft; SHORT srWindowRight; SHORT srWindowLeft; SHORT srWindowBottom;" & _
		"short dwMaximumWindowSizeX; short dwMaximumWindowSizeY"
Global Const $tagCHAR_INFO_W = "WCHAR UnicodeChar; WORD Attributes"
Global Const $tagPSMALL_RECT = "SHORT Left; SHORT Right; SHORT Left; SHORT Bottom;"
; ===============================================================================================================================
; #FUNCTION# ====================================================================================================================
; Name...........: system
; Description ...: Invokes the command processor to execute a command. Once the command execution has terminated, the processor
;				   gives the control back to the program, returning an int value, whose interpretation is system-dependent.
; Syntax.........: system($szCommand)
; Parameters ....: $szString      		- A string containing a system command to be executed.
; Return values .: Success              - Depends on command given.
;                  Failure              - Depends on command given.
; Author ........: Janus Thorborg (Shaggi)
; Modified.......: 06/08/2012
; Remarks .......: Common use is system("pause") or system("cls").
; Related .......: RunWait
; Link ..........: http://www.cplusplus.com/reference/clibrary/cstdlib/system/
; Example .......: No
; ===============================================================================================================================
Func system($szCommand)
	If $szCommand Then
		If Not $__Amount__Startup_Console Then
			__Console__CreateConsole()
			$__Amount__Startup_Console += 1
		EndIf
		Return RunWait(@ComSpec & " /c " & $szCommand, @ScriptDir, Default, 0x10)
	EndIf
	Return False
EndFunc   ;==>system
; #FUNCTION# ====================================================================================================================
; Name...........: Cout
; Description ...: Writes a UNICODE string to the Standard Output Stream, with optional attributes. Similar to std::cout in C++ and
;					ConsoleWrite().
; Syntax.........: Cout($szString [, $iAttr = -1])
; Parameters ....: $szString      		- A string to write to the Standard Output Stream.
;                  $iAttr             	- If supplied, the function sets the current text attributes to this before writing,
;										  and resets it back to normal after writing. Attributes (Thanks to Matt Diesel (Mat)):
;                                       |FOREGROUND_BLUE - Text color contains blue.
;                                       |FOREGROUND_GREEN - Text color contains green.
;                                       |FOREGROUND_RED - Text color contains red.
;                                       |FOREGROUND_INTENSITY - Text color is intensified.
;                                       |BACKGROUND_BLUE - Background color contains blue.
;                                       |BACKGROUND_GREEN - Background color contains green.
;                                       |BACKGROUND_RED - Background color contains red.
;                                       |BACKGROUND_INTENSITY - Background color is intensified.
;                                         BitOR these together, if more than one attribute is used.
; Return values .: Success              - True
;                  Failure              - False - @error is set and DllCall() @error is kept in @extended.
; Author ........: Janus Thorborg (Shaggi)
; Modified.......: 09/07/2011
; Remarks .......:
; Related .......: Cerr
; Link ..........: http://msdn.microsoft.com/en-us/library/ms687401(VS.85).aspx
; Example .......: No
; ===============================================================================================================================
Func Cout($szString, $iAttr = -1)
	If Not $__Amount__Startup_Console Then
		__Console__CreateConsole()
		$__Amount__Startup_Console += 1
	EndIf
	Local $lpBuffer = DllStructCreate("wchar[" & StringLen($szString) + 1 & "]")
	DllStructSetData($lpBuffer, 1, $szString)
	Local $lpNumberOfCharsWritten = 0
	If $_bConsole__PrintToStdStreams Then ConsoleWrite($szString)
	Switch $iAttr
		Case -1
			Local $aResult = DllCallAddress("BOOL", $_pfTable[$_eWrite], _
											"handle", $__CStreams[$_cOut], _
											"ptr", DllStructGetPtr($lpBuffer), _
											"dword", StringLen($szString), _
											"dword*", $lpNumberOfCharsWritten, _
											"ptr", 0)
			Return $aResult[0]
		Case Else
			Local $aResult1 = DllCallAddress("BOOL", $_pfTable[$_eSetCT], _
											 "handle", $__CStreams[$_cOut], "word", $iAttr)

			Local $aResult2 = DllCallAddress("BOOL", $_pfTable[$_eWrite], _
											 "handle", $__CStreams[$_cOut], _
											 "ptr", DllStructGetPtr($lpBuffer), _
											 "dword", StringLen($szString), _
											 "dword*", $lpNumberOfCharsWritten, _
											 "ptr", 0)

			Local $aResult3 = DllCallAddress("BOOL", $_pfTable[$_eSetCT], _
											 "handle", $__CStreams[$_cOut], "word", 0x7)
			Switch $aResult2[0]
				Case 0
					Return SetError(1,@error,False)
				Case Else
					Return (($aResult1[0] <> 0) AND ($aResult3[0] <> 0))
			EndSwitch
	EndSwitch
	Return False
EndFunc   ;==>Cout
; #FUNCTION# ====================================================================================================================
; Name...........: Cerr
; Description ...: Writes a UNICODE string to the Standard Error Stream, with optional attributes. Similar to std::cerr in C++ and
;					ConsoleWriteError().
; Syntax.........: Cerr($szString [, $iAttr = -1])
; Parameters ....: $szString      		- A string to write to the Standard Error Stream.
;                  $iAttr             	- If supplied, the function sets the current text attributes to this before writing,
;										  and resets it back to normal after writing. Attributes (Thanks to Matt Diesel (Mat)):
;                                       |FOREGROUND_BLUE - Text color contains blue.
;                                       |FOREGROUND_GREEN - Text color contains green.
;                                       |FOREGROUND_RED - Text color contains red.
;                                       |FOREGROUND_INTENSITY - Text color is intensified.
;                                       |BACKGROUND_BLUE - Background color contains blue.
;                                       |BACKGROUND_GREEN - Background color contains green.
;                                       |BACKGROUND_RED - Background color contains red.
;                                       |BACKGROUND_INTENSITY - Background color is intensified.
;                                         BitOR these together, if more than one attribute is used.
; Return values .: Success              - True
;                  Failure              - False - @error is set - see @extended for DllCall() @error.
; Author ........: Janus Thorborg (Shaggi)
; Modified.......: 09/07/2011
; Remarks .......:
; Related .......: Cout
; Link ..........: http://msdn.microsoft.com/en-us/library/ms687401(VS.85).aspx
; Example .......: No
; ===============================================================================================================================
Func Cerr($szString, $iAttr = -1)
	If Not $__Amount__Startup_Console Then
		__Console__CreateConsole()
		$__Amount__Startup_Console += 1
	EndIf
	Local $lpBuffer = DllStructCreate("wchar[" & StringLen($szString) + 1 & "]")
	DllStructSetData($lpBuffer, 1, $szString)
	Local $lpNumberOfCharsWritten = 0
	If $_bConsole__PrintToStdStreams Then ConsoleWrite($szString)
	Switch $iAttr
		Case -1
			Local $aResult = DllCallAddress("BOOL", $_pfTable[$_eWrite], _
											"handle", $__CStreams[$_cErr], _
											"ptr", DllStructGetPtr($lpBuffer), _
											"dword", StringLen($szString), _
											"dword*", $lpNumberOfCharsWritten, _
											"ptr", 0)
			Return $aResult[0]
		Case Else
			Local $aResult1 = DllCallAddress("BOOL", $_pfTable[$_eSetCT], _
											 "handle", $__CStreams[$_cErr], "word", $iAttr)

			Local $aResult2 = DllCallAddress("BOOL", $_pfTable[$_eWrite], _
											 "handle", $__CStreams[$_cErr], _
											 "ptr", DllStructGetPtr($lpBuffer), _
											 "dword", StringLen($szString), _
											 "dword*", $lpNumberOfCharsWritten, _
											 "ptr", 0)

			Local $aResult3 = DllCallAddress("BOOL", $_pfTable[$_eSetCT], _
											 "handle", $__CStreams[$_cErr], "word", 0x7)
			Switch $aResult2[0]
				Case 0
					Return SetError(1,@error,False)
				Case Else
					Return (($aResult1[0] <> 0) AND ($aResult3[0] <> 0))
			EndSwitch
	EndSwitch
	Return False
EndFunc   ;==>Cerr
; #FUNCTION# ====================================================================================================================
; Name...........: Cin
; Description ...: Retrieves a UNICODE string from the Standard Input Stream, with optional size. Similar to std::cin in C++.
; Syntax.........: Cin(ByRef $szString [, $iSize = 128])
; Parameters ....: $szString      		- A string the content is copied to.
;                  $iSize            	- If supplied, the function sets the maximal size of the characters read to this.
; Return values .: Success              - Actual amount of characters read.
;                  Failure              - False - @error is set and @extended holds DllCall() @error
; Author ........: Janus Thorborg (Shaggi)
; Modified.......: 09/07/2011
; Remarks .......: Returns once something has been typed into console AND enter is pressed.
; Related .......: Getch
; Link ..........: http://msdn.microsoft.com/en-us/library/ms684958(VS.85).aspx
; Example .......: No
; ===============================================================================================================================
Func Cin(ByRef $szString, $iSize = 128)
	If Not $__Amount__Startup_Console Then
		__Console__CreateConsole()
		$__Amount__Startup_Console += 1
	EndIf
	Local $lpBuffer = DllStructCreate("wchar[" & $iSize + 3 & "]")
	Local $lpNumberOfCharsRead = 0
	Local $aResult = DllCallAddress("BOOL", $_pfTable[$_eRead], _
									"handle", $__CStreams[$_cIn], _
									"ptr", DllStructGetPtr($lpBuffer), _
									"dword", DllStructGetSize($lpBuffer), _
									"dword*", $lpNumberOfCharsRead, _
									"ptr", 0)
	Select
		Case Not $aResult[0]
			Return SetError(1,@error,False)
		Case Else
			$szString = StringTrimRight(DllStructGetData($lpBuffer, 1),2)
			Return $aResult[4]
	EndSelect
EndFunc   ;==>Cin
; #FUNCTION# ====================================================================================================================
; Name...........: Getch
; Description ...: Retrieves 1 unicode character from the input buffer. Blocks.
; Syntax.........: Getch()
; Parameters ....:
; Return values .: Success              - A single wide character.
;                  Failure              - False and @error is set - see @extended for DllCall() @error.
; Author ........: Janus Thorborg (Shaggi)
; Modified.......: 09/07/2011
; Remarks .......: Returns once something has been typed into console. Doesn't work with Esc, arrows or F1-12. Don't use it in
;				   callback events, it will halt the console!
; Related .......: Cin
; Link ..........:
; Example .......: No
; ===============================================================================================================================
Func Getch()
	If Not $__Amount__Startup_Console Then
		__Console__CreateConsole()
		$__Amount__Startup_Console += 1
	EndIf
	Local $mode, $Char, $Count, $lpNumberOfCharsRead
	Local $Ret = DllCallAddress("BOOL", $_pfTable[$_eGetCM], _
								"handle",$__CStreams[$_cIn],"dword*",$mode)
	If @Error OR NOT $Ret[0] Then Return SetError(1,@error,False)
	$Mode = $Ret[2]
	$Ret = DllCallAddress("BOOL", $_pfTable[$_eSetCM], _
						  "handle",$__CStreams[$_cIn],"dword",0)
	If @Error OR NOT $Ret[0] Then Return SetError(2,@error,False)
	Local $aResult = DllCallAddress("BOOL", $_pfTable[$_eRead], _
									"handle", $__CStreams[$_cIn], _
									"int*", $Char, _
									"dword", 2, _
									"int*", $lpNumberOfCharsRead, _
									"ptr", 0)
	If @Error OR NOT $aResult[0] Then Return SetError(3,@error,False)
	Local $Return = ChrW($aResult[2])
	$Ret = DllCallAddress("BOOL", $_pfTable[$_eSetCM], _
						  "handle",$__CStreams[$_cIn],"dword",$Mode)
	If @Error OR NOT $Ret[0] Then return SetError(4,@error,False)
	Return $Return
EndFunc ;==>Getch
; #FUNCTION# ====================================================================================================================
; Name...........: RegisterConsoleEvent
; Description ...: Registers a function to be called when a specified signal is emitted from the system.
; Syntax.........: RegisterConsoleEvent($fFunc [, $dwSig = $sigCtrlClose [, $bRegisterExit = True]])
; Parameters ....: $fFunc      			- Either a string with the function name, or a function (only applies to beta).
;                  $dwSig           	- The signal the function is associated with. Can be one of the following values:
;                                       |$sigCtrlC - A CTRL+C signal was received.
;                                       |$sigCtrlBreak - A CTRL+BREAK signal was received.
;                                       |$sigCtrlClose - A signal that the system sends to all processes attached to a console
;														when the user closes the console (either by clicking Close on the console
;														window's window menu, or by clicking the End Task button command
;														from Task Manager).
;                                       |$sigCtrlLogOff - A signal that the system sends to all console processes when a user
;														is logging off. This signal does not indicate which user is logging off,
;														so no assumptions can be made.
;														Note that this signal is received only by services. Interactive
;														applications are terminated at logoff, so they are not present
;														when the system sends this signal.
;                                       |$sigCtrlShutDown - A signal that the system sends when the system is shutting down.
;															Interactive applications are not present by the time the system sends
;															this signal, therefore it can be received only be services in this
;															situation. Services also have their own notification mechanism
;															for shutdown events.
;                  $bRegisterExit       - If true, registers the function to be called OnAutoItExit also.
; Return values .: Success              - True
;                  Failure              - False and @error is set - see @extended for DllCall() @error.
; Author ........: Janus Thorborg (Shaggi)
; Modified.......: 18/06/2012
; Remarks .......: Note that if only a function is passed, it is considered to be called on the close event, and the same function
;					is also registrered for normal AutoIt exit, so it gets called no matter what. Currently, there is no way to
;					terminate AutoIt normally (ie. call normal OnExit handlers) on close event, so this must be used in case of
;					something vital that has to be cleaned up on exit.
; Related .......: OnAutoItExitRegister
; Link ..........: http://msdn.microsoft.com/en-us/library/windows/desktop/ms683242(v=vs.85).aspx
; Example .......: No
; ===============================================================================================================================
Func RegisterConsoleEvent($fFunc, $dwSig = $sigCtrlClose, $bRegisterExit = True)
	If Not $__Amount__Startup_Console Then
		__Console__CreateConsole()
		$__Amount__Startup_Console += 1
	EndIf
	#cs
		Check bounds in the function table, resize if needed
	#ce
	$nCap = UBound($__Console__Handlers) -1
	$nAmountNeeded = $__Console__Handlers[0][0] + 1
	If $nAmountNeeded > $nCap Then
		ReDim $__Console__Handlers[$nCap + 2][2]
	EndIf
	$__Console__Handlers[0][0] += 1

	#cs
		Has the handler been registrered yet? If not, do it. Else pass.
	#ce
	If NOT $__Console__hCtrlHandler Then
		$__Console__hCtrlHandler = DllCallBackRegister("__Console__HandlerRoutine","bool","dword")
		Local $pCtrlHandler = DllCallBackGetPtr($__Console__hCtrlHandler)
		$aRet = DllCall($__Dll_Kernel32,"bool","SetConsoleCtrlHandler","ptr",$pCtrlHandler,"bool",1)
		If @Error OR NOT $aRet[0] OR _WinApi_GetLastError() Then Return SetError(_WinApi_GetLastError(), @extended, False)
	EndIf

	#cs
		Register the event and the function
	#ce
	$__Console__Handlers[ $__Console__Handlers[0][0] ][0] = $dwSig
	$__Console__Handlers[ $__Console__Handlers[0][0] ][1] = $fFunc

	If $bRegisterExit AND $dwSig = $sigCtrlClose Then OnAutoItExitRegister($fFunc)
	Return True
EndFunc
; #INTERNAL_USE_ONLY# ===========================================================================================================
; Name...........: __Console__HandlerRoutine
; Description ...: A callback called on system-generated signals. Calls any event handlers registrered using RegisterConsoleEvent.
; Syntax.........:  __Console__HandlerRoutine()
; Parameters ....: $dwSig - the generated signal.
; Return values .: None
; Author ........: Janus Thorborg (Shaggi)
; Modified.......: 18/06/2012
; ===============================================================================================================================
Func __Console__HandlerRoutine($dwSig)
	Local $fFunc
	For $i = 1 to UBound($__Console__Handlers) - 1
		If $dwSig = $__Console__Handlers[$i][0] AND $__Console__Handlers[$i][1] <> ""  Then
			If VarGetType($__Console__Handlers[$i][1]) = "string" Then ; string name passed
				Call($__Console__Handlers[$i][1])
			ElseIf VarGetType($__Console__Handlers[$i][1]) = "userfunction" Then ; function passed, applies to beta.
				$fFunc = $__Console__Handlers[$i][1]
				$fFunc()
			EndIf
		EndIf
	Next
	__Console__ShutDown()
	Exit
    Return False
EndFunc
; #INTERNAL_USE_ONLY# ===========================================================================================================
; Name...........: __Console_StartUp()
; Description ...: Checks if running under SciTE, if, then executes the script via ShellExecute so own console can be opened.
;				   Exits with the errorcode the executed script did.
; Syntax.........: __Console_StartUp()
; Parameters ....: None
; Return values .: None
; Author ........: Janus Thorborg (Shaggi)
; Modified.......: 16/03/2011
; Remarks .......: This function is used internally. Called automatically on AutoIt startup.
; Related .......:
; Link ..........:
; Example .......:
; ===============================================================================================================================
Func __Console__StartUp()
	Local $bIsRunningFromScite = StringInStr($CmdLineRaw, "/ErrorStdOut")
	Local $bIsRecursed = Execute(StringLeft($Cmdline[$Cmdline[0]],StringLen("/Console=")))
	If ($bIsRunningFromScite > 0) AND NOT $bIsRecursed Then
		Local $szCommandLine = '"' & @AutoItExe & '" "' & @ScriptFullPath & '" /Console=True'
		ConsoleWrite(@CRLF & "!<Console.au3>:" & @CRLF & @TAB & "Launching process on own..." & @CRLF & "+" & @TAB & "CmdLine:" & $szCommandLine & @CRLF)
		Local $iReturnCode = RunWait($szCommandline)
		ConsoleWrite(@CRLF & ">" & @TAB & @ScriptName & " returned " & $iReturnCode & " (0x" & Hex($iReturnCode, 8) & ")" & @CRLF)
		Exit $iReturnCode
	EndIf
	Global $__Dll_Kernel32 = DllOpen("kernel32.dll")
	OnAutoItExitRegister("__Console__ShutDown")
EndFunc   ;==>__Console_StartUp
; #INTERNAL_USE_ONLY# ===========================================================================================================
; Name...........: __Console_ShutDown()
; Description ...: If a console is present, it detaches and closes any handles opened.
; Syntax.........: __Console_ShutDown()
; Parameters ....: None
; Return values .: None
; Author ........: Janus Thorborg (Shaggi)
; Modified.......: 15/03/2011
; Remarks .......: This function is used internally. Called automatically on AutoIt shutdown.
; Related .......:
; Link ..........:
; Example .......:
; ===============================================================================================================================
Func __Console__ShutDown()
	If $__Amount__Startup_Console Then
		For $cStream in $__CStreams
			DllCall($__Dll_Kernel32,"BOOL","CloseHandle","handle",$CStream)
		Next
		__Console__KillConsole()
	EndIf
	DllClose($__Dll_Kernel32)
EndFunc   ;==>__Console_ShutDown
; #INTERNAL_USE_ONLY# ===========================================================================================================
; Name...........: __Console_CreateConsole()
; Description ...: Allocates an console, and opens up handles for the three standard streams: Input, Output and Error.
; Syntax.........: __Console_CreateConsole()
; Parameters ....: None
; Return values .: Success              - True
;                  Failure              - False
; Author ........: Janus Thorborg (Shaggi)
; Modified.......: 18/06/2012
; Remarks .......: This function is used internally. Called automatically the first time any of the Cin, Cerr or Cout funcs is used.
; Related .......:
; Link ..........:
; Example .......:
; ===============================================================================================================================
Func __Console__CreateConsole()
	If Not $__Amount__Startup_Console Then
		$__Amount__Startup_Console += 1
		Local $aResult = DllCall($__Dll_Kernel32, "BOOL", "AllocConsole")
		Local $fpTemp, $mKernelHandle = DllCall($__Dll_Kernel32, _
												"HANDLE","GetModuleHandleW", _
												"wstr", "Kernel32.dll")
		If @Error Or NOT $mKernelHandle[0] Then
			Exit(0xF)
		EndIf
		For $i = 0 To 4
			$fpTemp = DllCall($__Dll_Kernel32, _
							  "ptr", "GetProcAddress", _
							  "HANDLE", $mKernelHandle[0], _
							  "str", $_sfTable[$i])
			If @Error Or NOT $fpTemp[0] Then
				Exit(0xF + $i)
			EndIf
			$_pfTable[$i] = $fpTemp[0]
		Next
		$__CStreams[$_cOut] = __Console__GetStdHandle()
		$__CStreams[$_cIn] = __Console__GetStdHandle(-10)
		$__CStreams[$_cErr] = __Console__GetStdHandle(-12)
		Return $aResult[0]
	EndIf
EndFunc   ;==>__Console__CreateConsole
; #INTERNAL_USE_ONLY# ===========================================================================================================
; Name...........: __Console_ShutDown()
; Description ...: Frees the console from the process.
; Syntax.........: __Console_ShutDown()
; Parameters ....: None
; Return values .: None
; Author ........: Janus Thorborg (Shaggi)
; Modified.......: 15/03/2011
; Remarks .......: This function is used internally. Called automatically on AutoIt shutdown.
; Related .......:
; Link ..........:
; Example .......:
; ===============================================================================================================================
Func __Console__KillConsole()
	Local $aResult = DllCall($__Dll_Kernel32, "BOOL", "FreeConsole")
	Return $aResult[0]
EndFunc   ;==>__Console__KillConsole
; #INTERNAL_USE_ONLY# ===========================================================================================================
; Name...........: __Console_GetStdHandle()
; Description ...: Returns an handle to the desired standard stream.
; Syntax.........: __Console_GetStdHandle()
; Parameters ....: None
; Return values .: Success              - A handle to the stream.
;                  Failure              - 0
; Author ........: Janus Thorborg (Shaggi)
; Modified.......: 15/03/2011
; Remarks .......: This function is used internally. Called automatically the first time any of the Cin, Cerr or Cout funcs is used.
; Related .......:
; Link ..........:
; Example .......:
; ===============================================================================================================================
Func __Console__GetStdHandle($nStdHandle = -11)
	Local $aResult = DllCall($__Dll_Kernel32, "handle", "GetStdHandle", _
			"dword", $nStdHandle)
	Return $aResult[0]
EndFunc   ;==>__Console__GetStdHandle
func hash()
	return array()
EndFunc

func h()
	return hash()
EndFunc

func hget_index($hash, $key)
	for $i = 0 to count($hash)-1
		$pair = $hash[$i]

		if $pair[0] == $key Then
			return $i
		EndIf
	Next

	return Null
EndFunc

func hget_key($hash, $index)
	if $index >= count($hash) then return Null
	$pair = $hash[$index]

	return $pair[0]
EndFunc

func hget_keys($hash)
	$a = a()
	for $i = 0 to count($hash)-1
		push($a, hget_key($hash, $i))
	Next

	return $a
EndFunc

func hget_value($hash, $index)
	if $index >= count($hash) then return Null
	$pair = $hash[$index]

	return $pair[1]
EndFunc

func hget_values($hash)
	$a = a()
	for $i = 0 to count($hash)-1
		push($a, hget_value($hash, $i))
	Next

	return $a
EndFunc

func hget($hash, $key, $default = Null)
	$index = hget_index($hash, $key)

	if $index <> Null then
		$pair = $hash[$index]
		return $pair[1]
	EndIf

	return $default
EndFunc

func hset(byref $hash, $key, $value)
	$index = hget_index($hash, $key)

	if $index <> Null then
		$pair = $hash[$index]
		$pair[1] = $value
		$hash[$index] = $pair

		return $hash
	EndIf

	$pair = array()
	push($pair, $key)
	push($pair, $value)

	push($hash, $pair)

	return $hash
EndFunc

func h_to_string($hash)
	$str = ''

	$str &= indent_line('{', 0)
	for $i = 0 to count($hash)-1
		$key = hget_key($hash, $i)
		$value = hget_value($hash, $i)

		$str &= indent_line($key & ': ' & $value, 1)
	Next

	$str &= indent_line('}', 0)

	return $str
EndFunc












#include <File.au3>

func path_normalize($path, $isDir = true)
	$parts = split($path, '/\')
	$result_parts = array()

	for $i = 0 to count($parts) - 1
		if($parts[$i] == '.' or $parts[$i] == '') Then ContinueLoop
		if($parts[$i] == '..') Then
			if(count($result_parts) > 0) Then
				pop($result_parts)
			Else
				push($result_parts, $parts[$i])
			EndIf
		Else
			push($result_parts, $parts[$i])
		EndIf
	Next

	if $isDir then
		if count($result_parts == 0) Then
			push($result_parts, '.')
			push($result_parts, '')
		ElseIf($result_parts[count($result_parts)-1] <> '') Then
			push($result_parts, '')
		EndIf
	EndIf

	return join($result_parts, '/')
EndFunc

func path_join($a, $b)
	return path_normalize($a & '/' & $b)
EndFunc

Func is_dir($sFilePath)
	Return Int(FileExists($sFilePath) And StringInStr(FileGetAttrib($sFilePath), 'D', Default, 1) > 0)
EndFunc

Func is_file($sFilePath)
	return FileExists($sFilePath) AND not is_dir($sFilePath)
EndFunc

func list_files($path, $filter = '*', $flag = $FLTA_FILESFOLDERS, $bReturnPath = False)
	$files = _FileListToArray($path, $filter, $flag, $bReturnPath)
	shift($files)

	if $flag <> $FLTA_FILES Then
		unshift($files, '.')
		unshift($files, '..')
	EndIf

	return $files
EndFunc

func ls($path = null)
	$path = _or($path, $__PATH__)
	$files = list_files($path)

	for $i = 0 to count($files)-1
		$file = $files[$i]
		$file_path = path_join($path, $file)

		if is_dir($file_path) then
			say('Dir:' & @TAB & $file)
		Else
			say('File:' & @TAB & $file)
		EndIf
	Next
EndFunc

func cd($path)

EndFunc

func s_times($str, $times = 1)
	$result = ''
	for $i = 1 to $times
		$result &= $str
	Next

	return $result
EndFunc

func line($str)
	return $str & @CRLF
EndFunc

func indent($str, $amount = 1)
	return s_times('  ', $amount) & $str
EndFunc

func indent_line($str, $amount = 1)
	return indent(line($str), $amount)
EndFunc

func split($string, $delimters, $flag = 0)
	$array = StringSplit($string, $delimters, $flag)
	shift($array)

	return $array
EndFunc

func join($array, $glue)
	$result = ""

	for $i = 0 to count($array)-1
		if($i > 0) then $result &= $glue
		$result &= $array[$i]
	Next

	return $result
EndFunc

Func starts_with($str, $end)
	return StringLeft($str, StringLen($end)) == $end
endfunc

Func ends_with($str, $end)
	return StringRight($str, StringLen($end)) == $end
endfunc

#include-once
#include <SQLite.au3>

$_SQL_STARTED_ = False
$_SQL_VERBOSE_ = True

func sql_startup()
	if not $_SQL_STARTED_ then
		$sSQliteDll = _SQLite_Startup()
		if @error <> 0 then
			if $_SQL_VERBOSE_ then say('"SQLite3.dll failed to load" (' & @error & ')')
			return False
		EndIf

		$_SQL_STARTED_ = True

		if $_SQL_VERBOSE_ then say('"SQLite3.dll loaded" ' & $sSQliteDll & " (" & _SQLite_LibVersion() & ")")

		return True
	EndIf

	return False
EndFunc

func sql_shutdown()
	if $_SQL_STARTED_ then
		_SQLite_Shutdown()
		if @error <> 0 then
			if $_SQL_VERBOSE_ then say('"SQLite3.dll failed to unload" (' & @error & ')')
			return False
		EndIf

		$_SQL_STARTED_ = False

		if $_SQL_VERBOSE_ then say('SQLite3.dll unloaded')

		return True
	EndIf

	return False
EndFunc

func sql_open($path)
	sql_startup()
	Return _SQLite_Open($path)
EndFunc

func sql_close($handle = -1)
	$result = _SQLite_Close($handle)
	if $result <> $SQLITE_OK then return $result

	return sql_shutdown()
EndFunc

func sql_sanitize($str)
	return $str
EndFunc

func sql_safe_insert($query, $params = Null)
	if $params <> Null Then
		for $i = 0 to count($params)-1
			;$query = StringFormat($query, $params[$i])
			$query = StringReplace($query, '%s', $params[$i], 1)
		Next
	EndIf

	return $query
EndFunc

func sql_exec($query, $handle = -1, $callback = '')
	if $_SQL_VERBOSE_ then say('Query: ' & $query)
	return _SQLite_Exec($handle, $query, $callback)
EndFunc

func sql_create_table($name, $columns, $handle = -1)
	$col_query = join(a_times('%s', count($columns)), ', ')
	$col_query = sql_safe_insert($col_query, $columns)

	return sql_exec(sql_safe_insert('CREATE TABLE %s (%s);', a($name, $col_query)), $handle)
EndFunc

func sql_insert($table, $record, $handle = -1)
	$column_sql = join(a_times('%s', count($record)), ',')
	$value_sql = join(a_times("'%s'", count($record)), ',')

	$column_sql = sql_safe_insert($column_sql, hget_keys($record))
	$value_sql = sql_safe_insert($value_sql, hget_values($record))

	return sql_exec(sql_safe_insert('INSERT INTO %s (%s) VALUES (%s)', a($table, $column_sql, $value_sql)), $handle)
EndFunc

func sql_update($table, $record, $handle = -1)
	$rowid = hget($record, 'rowid')
	$set_sql = join(a_times('%s', count($record)-1), ', ')

	$sets = a()

	for $i = 0 to count($record)-1
		$key = hget_key($record, $i)
		if $key == 'rowid' then ContinueLoop

		$value = hget_value($record, $i)

		push($sets, sql_safe_insert("%s = '%s'", a($key, $value)))
	Next

	$set_sql = sql_safe_insert($set_sql, $sets)

	return sql_exec(sql_safe_insert('UPDATE %s SET %s WHERE rowid = %s', a($table, $set_sql, $rowid)), $handle)
EndFunc

func sql_query($query, byref $records, $handle = -1)
	local $hQuery, $keys, $aRow

	if $_SQL_VERBOSE_ then say('Query: ' & $query)

	$status = _SQLite_Query($handle, $query, $hQuery)
	if $status <> $SQLITE_OK then return $status

	$status = _SQLite_FetchNames($hQuery, $keys)
	if $status <> $SQLITE_OK then return $status

	$records = a()

	While _SQLite_FetchData($hQuery, $aRow, False, False) = $SQLITE_OK ; Read Out the next Row
		$record = h()

		for $i = 0 to count($aRow)-1
			hset($record, $keys[$i], $aRow[$i])
		Next

		push($records, $record)
	WEnd

	return _SQLite_QueryFinalize($hQuery)
EndFunc



; Inline ..\..\bin\SQLite\sqlite3.dll, Creation Time: 2015/09/10 11:35:01
#include-once
Func __SQLite_Inline_Modified()
	Return "20150910113501" ; 2015/09/10 11:35:01
EndFunc   ;==>__SQLite_Inline_Modified
Func __SQLite_Inline_Version()
	Return "300801101" ; 3.8.11.1
EndFunc   ;==>__SQLite_Inline_Version



#include-once
#include <Array.au3>

func main($cli)
	say('Starting in: ' & @ScriptDir)
	say('Working in: ' & $__PATH__)
	return sql_test()

	while True
		say('> ' & $__PATH__)
		print('$ ')
		$in = scan()

		$args = split($in, ' ')
		$cmd = shift($args)

		do_action($cmd, $args)
	WEnd
EndFunc

func do_action($cmd, $args)
	switch $cmd
		case 'exit'
			terminate()
		case 'q'
			terminate()
		case 'restart'
			restart()
		case 'r'
			restart()
		case 'ls'
			ls()
		case 'cd'
			say('Not implemented')
		case 'exec'
			say('Not implemented')
		case 'test'
			say(1 or 2)
		case 'help'
			say('- cd' & @TAB & @TAB & '"Navigates" to dir')
			say('- ls' & @TAB & @TAB & 'Lists folders in current dir')
			say('- restart, r' & @TAB & 'Restarts this console here (for code changes)')
			say('- exit, q' & @TAB & 'Closes the console')
			say('- exec' & @TAB & @TAB & 'Execute something (AutoIt)')
		Case Else
			say('Soory, do not know how to do "'& $cmd &'"')
			say('Run "help" to show a list of commands')
	EndSwitch

	say('')
EndFunc


Func sql_test()
	say('----------------------')
	say('Testing sql')
	say('----------------------')
	say(sql_open(':memory:'))
	say('----------------------')
	say(sql_create_table('users', array('name', 'email', 'password')) == $SQLITE_OK)

	say('----------------------')

	$nobby = hash()
	hset($nobby, 'name', 'Nobby')
	hset($nobby, 'email', 'test@web.de')
	hset($nobby, 'password', 'super_secret_1337')

	say(sql_insert('users', $nobby) == $SQLITE_OK)

	display_accounts()

	say('----------------------')

	$max = hash()
	hset($max, 'name', 'Max')
	hset($max, 'email', 'king_of_web@web.de')
	hset($max, 'password', '1337_kink_lolz')

	say(sql_insert('users', $max) == $SQLITE_OK)

	$accounts = display_accounts()

	say('----------------------')

	$max = $accounts[1]

	hset($max, 'name', 'Marlene')
	hset($max, 'password', 'changed_password')

	say(sql_update('users', $max) == $SQLITE_OK)

	display_accounts()

	say('----------------------')

	say(sql_close())

	Return getch()
EndFunc   ;==>sql_test


func display_accounts()
	local $accounts

	say('Displaying accounts...')
	say(sql_query('SELECT ROWID, * FROM users', $accounts) == $SQLITE_OK)

	say('Accounts: ' & count($accounts))

	for $i = 0 to count($accounts)-1
		say(h_to_string($accounts[$i]))
	Next

	return $accounts
EndFunc



; *here goes the file that includes boot.au3


; initializing goes here

func boot()
	$__PATH__ = @ScriptDir & '\'

	for $i = 1 to $CmdLine[0]
		if not starts_with($CmdLine[$i], '\') Then
			$__PATH__ = $CmdLine[$i]
			ExitLoop
		EndIf
	Next
EndFunc

func restart()
	au3_call(@ScriptFullPath, @ScriptDir)
	terminate()
EndFunc

func terminate()
	Exit
EndFunc

boot()
main(cli_setup())
